/*
 * This file is generated by jOOQ.
*/
package org.jooq.example.jpa.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.example.jpa.jooq.Keys;
import org.jooq.example.jpa.jooq.Public;
import org.jooq.example.jpa.jooq.tables.records.AaRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Aa extends TableImpl<AaRecord> {

    private static final long serialVersionUID = -1534734559;

    /**
     * The reference instance of <code>PUBLIC.AA</code>
     */
    public static final Aa AA = new Aa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AaRecord> getRecordType() {
        return AaRecord.class;
    }

    /**
     * The column <code>PUBLIC.AA.ID</code>.
     */
    public final TableField<AaRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_40563DD5_3FB0_4101_A349_173312643592)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.AA.TEXT</code>.
     */
    public final TableField<AaRecord, String> TEXT = createField("TEXT", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>PUBLIC.AA</code> table reference
     */
    public Aa() {
        this(DSL.name("AA"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.AA</code> table reference
     */
    public Aa(String alias) {
        this(DSL.name(alias), AA);
    }

    /**
     * Create an aliased <code>PUBLIC.AA</code> table reference
     */
    public Aa(Name alias) {
        this(alias, AA);
    }

    private Aa(Name alias, Table<AaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Aa(Name alias, Table<AaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AaRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AaRecord>> getKeys() {
        return Arrays.<UniqueKey<AaRecord>>asList(Keys.CONSTRAINT_8);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Aa as(String alias) {
        return new Aa(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Aa as(Name alias) {
        return new Aa(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Aa rename(String name) {
        return new Aa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Aa rename(Name name) {
        return new Aa(name, null);
    }
}
