/*
 * This file is generated by jOOQ.
*/
package org.jooq.example.jpa.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.example.jpa.jooq.Keys;
import org.jooq.example.jpa.jooq.Public;
import org.jooq.example.jpa.jooq.tables.records.BbRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bb extends TableImpl<BbRecord> {

    private static final long serialVersionUID = -1169940100;

    /**
     * The reference instance of <code>PUBLIC.BB</code>
     */
    public static final Bb BB = new Bb();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BbRecord> getRecordType() {
        return BbRecord.class;
    }

    /**
     * The column <code>PUBLIC.BB.ID</code>.
     */
    public final TableField<BbRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_39C1FBD4_DB9F_4A25_9DE6_1F59D85F6325)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.BB.TEXT</code>.
     */
    public final TableField<BbRecord, String> TEXT = createField("TEXT", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>PUBLIC.BB.PARENT_ID</code>.
     */
    public final TableField<BbRecord, Integer> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.BB</code> table reference
     */
    public Bb() {
        this(DSL.name("BB"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.BB</code> table reference
     */
    public Bb(String alias) {
        this(DSL.name(alias), BB);
    }

    /**
     * Create an aliased <code>PUBLIC.BB</code> table reference
     */
    public Bb(Name alias) {
        this(alias, BB);
    }

    private Bb(Name alias, Table<BbRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bb(Name alias, Table<BbRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BbRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BbRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_84;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BbRecord>> getKeys() {
        return Arrays.<UniqueKey<BbRecord>>asList(Keys.CONSTRAINT_84);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BbRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BbRecord, ?>>asList(Keys.FK4S6JWQ48UJLCMEDRLBK37R97);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bb as(String alias) {
        return new Bb(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bb as(Name alias) {
        return new Bb(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bb rename(String name) {
        return new Bb(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bb rename(Name name) {
        return new Bb(name, null);
    }
}
